pipeline {
    agent any

triggers {
        pollSCM('* * * * *') // Polls SCM for changes every minute
    }
    environment {
        // Define environment variables
        GIT_REPO = 'git@github.com:soumya17d/test3.git'
        GIT_CREDENTIALS_ID = 'github_clone'
        FILE_TO_PUSH = 'file.txt'
    }
    
       stages {
        stage('Check for Pull Request Merge') {
            steps {
                script {
                    def lastCommit = sh(script: 'git log --format=%B -n 1 HEAD', returnStdout: true).trim()
                    if (lastCommit.contains('Merge pull request')) {
                        echo 'Pull request merged. Triggering the job.'
                    } else {
                        echo 'No pull request merge. Skipping the job.'
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        } 
    stages {
        stage('Checkout') {
            steps {
                // Checkout the GitHub repository
                script {
                    checkout([$class: 'GitSCM',
                              branches: [[name: '*/main']], // Specify branch to checkout
                              userRemoteConfigs: [[url: GIT_REPO, credentialsId: GIT_CREDENTIALS_ID]]])
                }
            }
        }
        stage('Transfer Repository to Local') {
            steps {
                script {
                    // Transfer repository to local directory
                    sh 'cp -r . /tmp'
                }
            }
        }
    }
}
